<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/03/16/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/03/16/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>在新建博文的头部，直接输入该博文的分类、标签等即可。分类只能有一个，标签能有多个，多个标签不能一行，注意下面的格式。<br>摘要</p><span id="more"></span><p>正文</p>]]></content>
      
      
      <categories>
          
          <category> 分类1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mmlab学习笔记1-配置文件</title>
      <link href="/2023/02/28/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/02/28/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="mmlab学习笔记1-配置文件"><a href="#mmlab学习笔记1-配置文件" class="headerlink" title="mmlab学习笔记1-配置文件"></a>mmlab学习笔记1-配置文件</h1><p>mmclassification下载地址:<br><a href="https://github.com/open-mmlab/mmclassification">https://github.com/open-mmlab/mmclassification</a></p><p>其中以C:.…….\Desktop\mmclassification-master\configs\convnext\convnext-tiny_32xb128_in1k.py为例<br>convnext-tiny_32xb128_in1k表示32块卡，每个卡的batch_size为128，in1k表示数据集的种类</p><h2 id="点开convnext-tiny-32xb128-in1k其中-base-为"><a href="#点开convnext-tiny-32xb128-in1k其中-base-为" class="headerlink" title="点开convnext-tiny_32xb128_in1k其中_base_为:"></a>点开convnext-tiny_32xb128_in1k其中_base_为:</h2><pre><code>_base_ = [    &#39;../_base_/models/convnext/convnext-tiny.py&#39;,    # 对应模型所处位置 C:\........\mmclassification-master\configs\_base_\models\convnext\convnext-tiny.py    &#39;../_base_/datasets/imagenet_bs64_swin_224.py&#39;,  #数据集预处理位置 对应C:\...\mmclassification-master\configs\_base_\datasets\imagenet_bs64_swin_224.py    &#39;../_base_/schedules/imagenet_bs1024_adamw_swin.py&#39;,#学习策略(lr等)对应C:\.\mmclassification-master\configs\_base_\schedules\imagenet_bs1024_adamw_swin.py    &#39;../_base_/default_runtime.py&#39;,   #（模型保存位置，日志保存位置等等）对应 #C:\...\mmclassification-master\configs\_base_\default_runtime.py]</code></pre><h2 id="1-打开C-……-mmclassification-master-configs-base-models-convnext-convnext-tiny-py"><a href="#1-打开C-……-mmclassification-master-configs-base-models-convnext-convnext-tiny-py" class="headerlink" title="//1.打开C:.…….\mmclassification-master\configs_base_\models\convnext\convnext-tiny.py"></a>//1.打开C:.…….\mmclassification-master\configs_base_\models\convnext\convnext-tiny.py</h2><pre><code>model = dict(    type=&#39;ImageClassifier&#39;, #对应C:\........\mmclassification-master\mmcls\models\classifiers\image.py中的ImageClassifier类    backbone=dict( #用于特征提取        type=&#39;ConvNeXt&#39;, #对应于C:\.......\mmclassification-master\mmcls\models\backbones\convnext.py中的ConvNeXt类        arch=&#39;tiny&#39;,#是论文中tiny结构的网络        out_indices=(3, ), #要输出的层级特征图的序号 ConvNeXt_tiny是4个stage，3表示输出最后一层级的特征图        drop_path_rate=0.1, #就是网络的drop_path的概率        gap_before_final_norm=True,        #参数初始化        init_cfg=[            dict(                type=&#39;TruncNormal&#39;,#初始化方法                layer=[&#39;Conv2d&#39;, &#39;Linear&#39;],#要初始化的层类型                std=.02, #TruncNormal的参数                bias=0.),            dict(type=&#39;Constant&#39;, layer=[&#39;LayerNorm&#39;], val=1., bias=0.),        ]),    head=dict(        type=&#39;LinearClsHead&#39;,#分类任务就用全连接LinearClsHead即可        num_classes=1000,#输出类别个数        in_channels=768,#输入数据的通道数        loss=dict(type=&#39;CrossEntropyLoss&#39;, loss_weight=1.0), #对应C:\....\mmclassification-master\mmcls\models\losses\cross_entropy_loss.py中的CrossEntropyLoss类    ))</code></pre><h2 id="补充-其中C-……-mmclassification-master-mmcls-models-classifiers-image-py中的ImageClassifier类中的forward-train较为重要"><a href="#补充-其中C-……-mmclassification-master-mmcls-models-classifiers-image-py中的ImageClassifier类中的forward-train较为重要" class="headerlink" title="补充:其中C:.…….\mmclassification-master\mmcls\models\classifiers\image.py中的ImageClassifier类中的forward_train较为重要"></a>补充:其中C:.…….\mmclassification-master\mmcls\models\classifiers\image.py中的ImageClassifier类中的forward_train较为重要</h2><pre><code>def forward_train(self, img, gt_label, **kwargs):    if self.augments is not None:        img, gt_label = self.augments(img, gt_label) #获取数据和对应的标签    x = self.extract_feat(img)#提取特征    losses = dict() #创建字典    loss = self.head.forward_train(x, gt_label)#计算损失    losses.update(loss)#将损失加入字典    return losses</code></pre><h2 id="2-打开C-mmclassification-master-configs-base-datasets-imagenet-bs64-swin-224-py"><a href="#2-打开C-mmclassification-master-configs-base-datasets-imagenet-bs64-swin-224-py" class="headerlink" title="2.打开C:...\mmclassification-master\configs_base_\datasets\imagenet_bs64_swin_224.py"></a>2.打开C:...\mmclassification-master\configs_base_\datasets\imagenet_bs64_swin_224.py</h2><pre><code>_base_ = [&#39;./pipelines/rand_aug.py&#39;]#dataset settingsdataset_type = &#39;ImageNet&#39;#对应C:\......\mmclassification-master\mmcls\datasets\imagenet.py#对输入数据标准化的参数下面用到了img_norm_cfg = dict(    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)#训练集的预处理操作train_pipeline = [    dict(type=&#39;LoadImageFromFile&#39;),#对应C:\......\Desktop\mmclassification-master\mmcls\datasets\pipelines\loading.py中的LoadImageFromFile函数读取数据    dict(        type=&#39;RandomResizedCrop&#39;, #下面是一些数据增强操作        size=224,        backend=&#39;pillow&#39;,        interpolation=&#39;bicubic&#39;),    dict(type=&#39;RandomFlip&#39;, flip_prob=0.5, direction=&#39;horizontal&#39;),    dict(        type=&#39;RandAugment&#39;,        policies=&#123;&#123;_base_.rand_increasing_policies&#125;&#125;,        num_policies=2,        total_level=10,        magnitude_level=9,        magnitude_std=0.5,        hparams=dict(            pad_val=[round(x) for x in img_norm_cfg[&#39;mean&#39;][::-1]],            interpolation=&#39;bicubic&#39;)),    dict(        type=&#39;RandomErasing&#39;,        erase_prob=0.25,        mode=&#39;rand&#39;,        min_area_ratio=0.02,        max_area_ratio=1 / 3,        fill_color=img_norm_cfg[&#39;mean&#39;][::-1],        fill_std=img_norm_cfg[&#39;std&#39;][::-1]),    dict(type=&#39;Normalize&#39;, **img_norm_cfg),    dict(type=&#39;ImageToTensor&#39;, keys=[&#39;img&#39;]),    dict(type=&#39;ToTensor&#39;, keys=[&#39;gt_label&#39;]),#转成tensor类型    dict(type=&#39;Collect&#39;, keys=[&#39;img&#39;, &#39;gt_label&#39;])#返回图像和标签]#测试集的预处理操作test_pipeline = [    dict(type=&#39;LoadImageFromFile&#39;),    dict(        type=&#39;Resize&#39;,        size=(256, -1),        backend=&#39;pillow&#39;,        interpolation=&#39;bicubic&#39;),    dict(type=&#39;CenterCrop&#39;, crop_size=224),    dict(type=&#39;Normalize&#39;, **img_norm_cfg),    dict(type=&#39;ImageToTensor&#39;, keys=[&#39;img&#39;]),    dict(type=&#39;Collect&#39;, keys=[&#39;img&#39;])]data = dict(    samples_per_gpu=64, #每张卡的batch_size    workers_per_gpu=8,    train=dict(        type=dataset_type,        data_prefix=&#39;data/imagenet/train&#39;,#读训练数据的路径        pipeline=train_pipeline),    val=dict(        type=dataset_type,        data_prefix=&#39;data/imagenet/val&#39;, #这两行指定读标签的地方  data_prefix这个会将文件夹的名字当作标签        ann_file=&#39;data/imagenet/meta/val.txt&#39;,#ann_file这个会以标注值作为标签        pipeline=test_pipeline),    test=dict(        # replace `data/val` with `data/test` for standard test        type=dataset_type,        data_prefix=&#39;data/imagenet/val&#39;,        ann_file=&#39;data/imagenet/meta/val.txt&#39;,        pipeline=test_pipeline))evaluation = dict(interval=10, metric=&#39;accuracy&#39;)#每训练10轮输出一次正确率（accuracy）</code></pre><h2 id="3-查看并自行配置C-mmclassification-master-configs-base-schedules-imagenet-bs1024-adamw-swin-py中的内容"><a href="#3-查看并自行配置C-mmclassification-master-configs-base-schedules-imagenet-bs1024-adamw-swin-py中的内容" class="headerlink" title="3.查看并自行配置C:.\mmclassification-master\configs_base_\schedules\imagenet_bs1024_adamw_swin.py中的内容"></a>3.查看并自行配置C:.\mmclassification-master\configs_base_\schedules\imagenet_bs1024_adamw_swin.py中的内容</h2><h2 id="4-查看并自行配置C-mmclassification-master-configs-base-default-runtime-py"><a href="#4-查看并自行配置C-mmclassification-master-configs-base-default-runtime-py" class="headerlink" title="4.查看并自行配置C:...\mmclassification-master\configs_base_\default_runtime.py"></a>4.查看并自行配置C:...\mmclassification-master\configs_base_\default_runtime.py</h2>]]></content>
      
      
      <categories>
          
          <category> 分类2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 页脚与头图透明 */#footer {  background: transparent !important;}#page-header {  background: transparent !important;}/* 白天模式遮罩透明 */#footer::before {  background: transparent !important;}#page-header::before {  background: transparent !important;}/* 夜间模式遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}/* 小冰分类分类磁铁黑夜模式适配 *//* 一般状态 */[data-theme="dark"] .magnet_link_context {  background: #1e1e1e;  color: antiquewhite;}/* 鼠标悬浮状态 */[data-theme="dark"] .magnet_link_context:hover {  background: #3ecdf1;  color: #f2f2f2;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>setInterval(() => {  let create_time = Math.round(new Date('2023-03-01 00:00:00').getTime() / 1000); //在此行修改建站时间  let timestamp = Math.round((new Date().getTime()) / 1000);  let second = timestamp - create_time;  let time = new Array(0, 0, 0, 0, 0);  var nol = function(h){    return h>9?h:'0'+h;  }  if (second >= 365 * 24 * 3600) {    time[0] = parseInt(second / (365 * 24 * 3600));    second %= 365 * 24 * 3600;  }  if (second >= 24 * 3600) {    time[1] = parseInt(second / (24 * 3600));    second %= 24 * 3600;  }  if (second >= 3600) {    time[2] = nol(parseInt(second / 3600));    second %= 3600;  }  if (second >= 60) {    time[3] = nol(parseInt(second / 60));    second %= 60;  }  if (second > 0) {    time[4] = nol(second);  }  if ((Number(time[2])<22) && (Number(time[2])>7)){    currentTimeHtml ="<img class='boardsign' src='https://img.shields.io/badge/糖果屋-营业中-6adea8?style=social&logo=cakephp' title='距离百年老店也就差不到一百年~'><div id='runtime'>" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';  }  else{    currentTimeHtml ="<img class='boardsign' src='https://img.shields.io/badge/糖果屋-打烊了-6adea8?style=social&logo=coffeescript' title='这个点了应该去睡觉啦，熬夜对身体不好哦'><div id='runtime'>" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';  }  document.getElementById("workboard").innerHTML = currentTimeHtml;}, 1000);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
