<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>cuda共享内存</title>
      <link href="/2023/06/16/cuda-share-mem/"/>
      <url>/2023/06/16/cuda-share-mem/</url>
      
        <content type="html"><![CDATA[<h1 id="cuda共享内存"><a href="#cuda共享内存" class="headerlink" title="cuda共享内存"></a>cuda共享内存</h1><hr><p><strong>发现很好的cuda学习资料:大佬博客:<a href="https://face2ai.com/program-blog/#GPU%E7%BC%96%E7%A8%8B%EF%BC%88CUDA%EF%BC%89">https://face2ai.com/program-blog/#GPU%E7%BC%96%E7%A8%8B%EF%BC%88CUDA%EF%BC%89</a></strong><br><strong>cuda共享内存可参考:<a href="https://developer.nvidia.com/blog/efficient-matrix-transpose-cuda-cc/">https://developer.nvidia.com/blog/efficient-matrix-transpose-cuda-cc/</a></strong><br><strong>其中通过padding的方式解决bank conflict的原理可见:<a href="https://zhuanlan.zhihu.com/p/436395393">https://zhuanlan.zhihu.com/p/436395393</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 分类1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mmlab学习笔记3-自定义模块</title>
      <link href="/2023/05/04/%E7%AC%AC%E5%9B%9B%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/05/04/%E7%AC%AC%E5%9B%9B%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="mmlab学习笔记3-自定义模块"><a href="#mmlab学习笔记3-自定义模块" class="headerlink" title="mmlab学习笔记3-自定义模块"></a>mmlab学习笔记3-自定义模块</h1><h1 id="以C-Users-13514-Desktop-mmclassification-master-configs-base-models-convnext-convnext-tiny-py中使用了交叉熵损失函数，使用新加的一个函数替换交叉熵损失函数"><a href="#以C-Users-13514-Desktop-mmclassification-master-configs-base-models-convnext-convnext-tiny-py中使用了交叉熵损失函数，使用新加的一个函数替换交叉熵损失函数" class="headerlink" title="以C:\Users\13514\Desktop\mmclassification-master\configs_base_\models\convnext\convnext-tiny.py中使用了交叉熵损失函数，使用新加的一个函数替换交叉熵损失函数"></a>以C:\Users\13514\Desktop\mmclassification-master\configs_base_\models\convnext\convnext-tiny.py中使用了交叉熵损失函数，使用新加的一个函数替换交叉熵损失函数</h1><p>交叉熵损失函数的实际代码在…\mmclassification-master\mmcls\models\losses\cross_entropy_loss.py中，注意损失函数的模块代码都在…\mmclassification-master\mmcls\models\losses中，而模型的模块代码在=应该在…\mmclassification-master\mmcls\models\backbones文件夹下，自定义模型的模块的方式和loss一致只不过需要在…\mmclassification-master\mmcls\models\backbones文件夹下添加新的模块代码并在…\mmclassification-master\mmcls\models\backbones文件夹的init.py中导入头文件将注册的类名添加进去。<br>在此复制一个\cross_entropy_loss.py叫做l1_loss.py放在…\mmclassification-master\mmcls\models\losses\文件夹下，重写代码。<br>代码详解见<a href="https://blog.51cto.com/u_15360564/5437253#1mmdet_12%EF%BC%8C%E5%85%B6%E5%AE%9E@weighted_loss%E8%A3%85%E9%A5%B0%E5%99%A8%E5%B0%81%E8%A3%85%E4%BA%86%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C%EF%BC%8C%E5%85%B6%E5%AE%9E%E5%8F%AF%E4%BB%A5%E4%B8%8D%E7%94%A8@weighted_loss%EF%BC%8C%E7%9B%B4%E6%8E%A5%E5%9C%A8l1_loss%E4%B8%AD%E8%87%AA%E5%B7%B1%E6%89%8B%E5%86%99%E6%89%80%E6%9C%89%E7%9A%84%E8%AE%A1%E7%AE%97%E6%AD%A5%E9%AA%A4%E5%8D%B3%E5%8F%AF">https://blog.51cto.com/u_15360564/5437253#1mmdet_12，其实@weighted_loss装饰器封装了一些操作，其实可以不用@weighted_loss，直接在l1_loss中自己手写所有的计算步骤即可</a></p><p>接着打开C:\Users\13514\Desktop\mmclassification-master\mmcls\models\losses_<em>init</em><em>.py在其中导入from .l1_loss import L1Loss,l1_loss<br>再在__all</em>_ = […]里面加入__all__ = […..,’L1Loss’,’l1_loss’]即可，此时在以…\mmclassification-master\configs_base_\models\convnext\convnext-tiny.py中的loss=dict(type=’CrossEntropyLoss’,…)中的’CrossEntropyLoss’可改为’L1Loss’，而loss=dict(type=’L1Loss’,…)中的…就是指定一下L1Loss类中构造函数的参数的实参</p>]]></content>
      
      
      <categories>
          
          <category> 分类2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mmlab学习笔记2-训练结束后的效果测试</title>
      <link href="/2023/05/04/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/05/04/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="mmlab学习笔记2-训练结束后的效果测试"><a href="#mmlab学习笔记2-训练结束后的效果测试" class="headerlink" title="mmlab学习笔记2-训练结束后的效果测试"></a>mmlab学习笔记2-训练结束后的效果测试</h1><h2 id="1-预测一张图片"><a href="#1-预测一张图片" class="headerlink" title="1. 预测一张图片"></a>1. 预测一张图片</h2><p>点开 …\mmclassification-master\demo\image_demo.py<br>  首先将需要预测的一张图片放到…\mmclassification-master\demo文件夹中</p><p>接着将pycharm右上角选中image_demo，点击编辑配置，将下面的复制到形参栏中点击运行即可（一个是图片名，一个是模型配置文件路径，一个是训练结果路径）（注意下面的给全局路径方便一点，epoch_xx.pth 中xx就是保存的轮次的文件，选一个即可，../mmclassification-master/tools/work_dirs/convnext-tiny_32xb128_in1k文件夹中的latest.pth就是最后一轮训练的epoch_xx.pth）:</p><p>图片名.jpg ../mmclassification-master/configs/convnext/convnext-tiny_32xb128_in1k.py ../mmclassification-master/tools/work_dirs/convnext-tiny_32xb128_in1k/epoch_xx.pth</p><h2 id="2-使用测试集进行整体测试"><a href="#2-使用测试集进行整体测试" class="headerlink" title="2. 使用测试集进行整体测试"></a>2. 使用测试集进行整体测试</h2><p>下面都表示全局路径<br>打开….\mmclassification-master\tools\test.py<br>接着在..\mmclassification-master\tools\work_dirs\convnext-tiny_32xb128_in1k文件夹中新建一个val_result文件夹保存评估结果<br>接着将pycharm右上角选中test，点击编辑配置，将下面的复制到形参栏中点击运行即可<br>（一个是模型配置文件路径，一个是训练结果路径，–show   //这个–show有时下一行（保存评估结果的文件夹）就不要有（这个–show有表示在每张图上显示一下结果，没有就不显示）<br>保存评估结果的文件夹           //这个可有可无，有的时候在每张图上显示结果并存储下来，存完输出总的测试结果，无的时候不会存图直接输出总的测试结果<br>评估指标                  //在….\mmclassification-master\tools\test.py中的parser.add_argument里面的help里面看到有多个可以自己来指定<br>）</p><p>../mmclassification-master/configs/convnext/convnext-tiny_32xb128_in1k.py ../mmclassification-master/tools/work_dirs/convnext-tiny_32xb128_in1k/epoch_xx.pth<br>–show-dir ../mmclassification-master/tools/work_dirs/convnext-tiny_32xb128_in1k/val_result<br>–metrics accuracy recall</p>]]></content>
      
      
      <categories>
          
          <category> 分类2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/03/16/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/03/16/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>在新建博文的头部，直接输入该博文的分类、标签等即可。分类只能有一个，标签能有多个，多个标签不能一行，注意下面的格式。<br>摘要</p><span id="more"></span><p>正文</p>]]></content>
      
      
      <categories>
          
          <category> 分类1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mmlab学习笔记1-配置文件</title>
      <link href="/2023/02/28/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/02/28/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="mmlab学习笔记1-配置文件"><a href="#mmlab学习笔记1-配置文件" class="headerlink" title="mmlab学习笔记1-配置文件"></a>mmlab学习笔记1-配置文件</h1><p>mmclassification下载地址:<br><a href="https://github.com/open-mmlab/mmclassification">https://github.com/open-mmlab/mmclassification</a></p><p>其中以C:.…….\Desktop\mmclassification-master\configs\convnext\convnext-tiny_32xb128_in1k.py为例<br>convnext-tiny_32xb128_in1k表示32块卡，每个卡的batch_size为128，in1k表示数据集的种类</p><h2 id="点开convnext-tiny-32xb128-in1k其中-base-为"><a href="#点开convnext-tiny-32xb128-in1k其中-base-为" class="headerlink" title="点开convnext-tiny_32xb128_in1k其中_base_为:"></a>点开convnext-tiny_32xb128_in1k其中_base_为:</h2><pre><code>_base_ = [    &#39;../_base_/models/convnext/convnext-tiny.py&#39;,    # 对应模型所处位置 C:\........\mmclassification-master\configs\_base_\models\convnext\convnext-tiny.py    &#39;../_base_/datasets/imagenet_bs64_swin_224.py&#39;,  #数据集预处理位置 对应C:\...\mmclassification-master\configs\_base_\datasets\imagenet_bs64_swin_224.py    &#39;../_base_/schedules/imagenet_bs1024_adamw_swin.py&#39;,#学习策略(lr等)对应C:\.\mmclassification-master\configs\_base_\schedules\imagenet_bs1024_adamw_swin.py    &#39;../_base_/default_runtime.py&#39;,   #（模型保存位置，日志保存位置等等）对应 #C:\...\mmclassification-master\configs\_base_\default_runtime.py]data = dict(samples_per_gpu=64) #设置batch_sizeoptimizer = dict(lr=4e-3)custom_hooks = [dict(type=&#39;EMAHook&#39;, momentum=4e-5, priority=&#39;ABOVE_NORMAL&#39;)]</code></pre><h2 id="1-打开C-……-mmclassification-master-configs-base-models-convnext-convnext-tiny-py"><a href="#1-打开C-……-mmclassification-master-configs-base-models-convnext-convnext-tiny-py" class="headerlink" title="//1.打开C:.…….\mmclassification-master\configs_base_\models\convnext\convnext-tiny.py"></a>//1.打开C:.…….\mmclassification-master\configs_base_\models\convnext\convnext-tiny.py</h2><p>backbone:主干网络,用来提取特征,常用Resnet、VGG等 head:获取网络输出,利用提取特征做出预测 neck:放在backbone和head之间,进一步提升特征的多样性及鲁棒性</p><pre><code>model = dict(    type=&#39;ImageClassifier&#39;, #对应C:\........\mmclassification-master\mmcls\models\classifiers\image.py中的ImageClassifier类，就是借助ImageClassifier类读取自己的数据，注意要在下面第二步提到的imagenet.py中将CLASSES改一下    backbone=dict( #用于特征提取        type=&#39;ConvNeXt&#39;, #对应于C:\.......\mmclassification-master\mmcls\models\backbones\convnext.py中的ConvNeXt类        arch=&#39;tiny&#39;,#是论文中tiny结构的网络        out_indices=(3, ), #要输出的层级特征图的序号 ConvNeXt_tiny是4个stage，3表示输出最后一层级的特征图        drop_path_rate=0.1, #就是网络的drop_path的概率        gap_before_final_norm=True,        #参数初始化        init_cfg=[            dict(                type=&#39;TruncNormal&#39;,#初始化方法                layer=[&#39;Conv2d&#39;, &#39;Linear&#39;],#要初始化的层类型                std=.02, #TruncNormal的参数                bias=0.),            dict(type=&#39;Constant&#39;, layer=[&#39;LayerNorm&#39;], val=1., bias=0.),        ]),    head=dict(        type=&#39;LinearClsHead&#39;,#分类任务就用全连接LinearClsHead即可        num_classes=1000,#输出类别个数        in_channels=768,#每个token的向量维度        loss=dict(type=&#39;CrossEntropyLoss&#39;, loss_weight=1.0), #对应C:\....\mmclassification-master\mmcls\models\losses\cross_entropy_loss.py中的CrossEntropyLoss类    ))</code></pre><h2 id="补充-其中C-……-mmclassification-master-mmcls-models-classifiers-image-py中的ImageClassifier类中的forward-train较为重要"><a href="#补充-其中C-……-mmclassification-master-mmcls-models-classifiers-image-py中的ImageClassifier类中的forward-train较为重要" class="headerlink" title="补充:其中C:.…….\mmclassification-master\mmcls\models\classifiers\image.py中的ImageClassifier类中的forward_train较为重要"></a>补充:其中C:.…….\mmclassification-master\mmcls\models\classifiers\image.py中的ImageClassifier类中的forward_train较为重要</h2><pre><code>def forward_train(self, img, gt_label, **kwargs):    if self.augments is not None:        img, gt_label = self.augments(img, gt_label) #获取数据和对应的标签    x = self.extract_feat(img)#提取特征    losses = dict() #创建字典    loss = self.head.forward_train(x, gt_label)#计算损失    losses.update(loss)#将损失加入字典    return losses</code></pre><h2 id="2-打开C-mmclassification-master-configs-base-datasets-imagenet-bs64-swin-224-py"><a href="#2-打开C-mmclassification-master-configs-base-datasets-imagenet-bs64-swin-224-py" class="headerlink" title="2.打开C:...\mmclassification-master\configs_base_\datasets\imagenet_bs64_swin_224.py"></a>2.打开C:...\mmclassification-master\configs_base_\datasets\imagenet_bs64_swin_224.py</h2><pre><code>_base_ = [&#39;./pipelines/rand_aug.py&#39;]#dataset settingsdataset_type = &#39;ImageNet&#39;#对应C:\......\mmclassification-master\mmcls\datasets\imagenet.py#对输入数据标准化的参数下面用到了img_norm_cfg = dict(    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)#训练集的预处理操作#下面的RandomFlip等就是数据增强操作，实际代码在....\mmclassification-master\mmcls\datasets\pipelines\transforms.py中，都是用@PIPELINES.register_module()注册在在....\mmclassification-master\mmcls\datasets\pipelines\__init__.py中import进去再在__all__ = [..]中加进去即可让type=&#39;自定义的数据增强操作&#39;，如下面dict(type=&#39;RandomFlip&#39;, flip_prob=0.5, direction=&#39;horizontal&#39;),中flip_prob和direction就是....\mmclassification-master\mmcls\datasets\pipelines\transforms.py中的RandomFlip类的构造函数的参数train_pipeline = [    dict(type=&#39;LoadImageFromFile&#39;),#对应C:\......\Desktop\mmclassification-master\mmcls\datasets\pipelines\loading.py中的LoadImageFromFile函数读取数据    dict(        type=&#39;RandomResizedCrop&#39;, #下面是一些数据增强操作        size=224,        backend=&#39;pillow&#39;,        interpolation=&#39;bicubic&#39;),    dict(type=&#39;RandomFlip&#39;, flip_prob=0.5, direction=&#39;horizontal&#39;),    dict(        type=&#39;RandAugment&#39;,        policies=&#123;&#123;_base_.rand_increasing_policies&#125;&#125;,        num_policies=2,        total_level=10,        magnitude_level=9,        magnitude_std=0.5,        hparams=dict(            pad_val=[round(x) for x in img_norm_cfg[&#39;mean&#39;][::-1]],            interpolation=&#39;bicubic&#39;)),    dict(        type=&#39;RandomErasing&#39;,        erase_prob=0.25,        mode=&#39;rand&#39;,        min_area_ratio=0.02,        max_area_ratio=1 / 3,        fill_color=img_norm_cfg[&#39;mean&#39;][::-1],        fill_std=img_norm_cfg[&#39;std&#39;][::-1]),    dict(type=&#39;Normalize&#39;, **img_norm_cfg),    dict(type=&#39;ImageToTensor&#39;, keys=[&#39;img&#39;]),    dict(type=&#39;ToTensor&#39;, keys=[&#39;gt_label&#39;]),#转成tensor类型    dict(type=&#39;Collect&#39;, keys=[&#39;img&#39;, &#39;gt_label&#39;])#返回图像和标签]#测试集的预处理操作test_pipeline = [    dict(type=&#39;LoadImageFromFile&#39;),    dict(        type=&#39;Resize&#39;,        size=(256, -1),        backend=&#39;pillow&#39;,        interpolation=&#39;bicubic&#39;),    dict(type=&#39;CenterCrop&#39;, crop_size=224),    dict(type=&#39;Normalize&#39;, **img_norm_cfg),    dict(type=&#39;ImageToTensor&#39;, keys=[&#39;img&#39;]),    dict(type=&#39;Collect&#39;, keys=[&#39;img&#39;])]data = dict(    samples_per_gpu=64, #每张卡的batch_size    workers_per_gpu=8,    train=dict(        type=dataset_type,        data_prefix=&#39;data/imagenet/train&#39;,#读训练数据的路径        pipeline=train_pipeline),    val=dict(        type=dataset_type,        data_prefix=&#39;data/imagenet/val&#39;, #这两行指定读标签的地方，注释掉ann_file表示会将文件夹的名字当作标签，若两个都有则是根据txt文件和指定的文件夹读取数据（该笔记注释掉了ann_file表示会将文件夹的名字当作标签）        #ann_file=&#39;data/imagenet/meta/val.txt&#39;,#ann_file这个会以标注值作为标签        pipeline=test_pipeline),    test=dict(        # replace `data/val` with `data/test` for standard test        type=dataset_type,        data_prefix=&#39;data/imagenet/test&#39;,        #ann_file=&#39;data/imagenet/meta/test.txt&#39;,        pipeline=test_pipeline))evaluation = dict(interval=10, metric=&#39;accuracy&#39;)#每训练10轮输出一次正确率（accuracy）</code></pre><h2 id="3-查看并自行配置C-mmclassification-master-configs-base-schedules-imagenet-bs1024-adamw-swin-py中的内容"><a href="#3-查看并自行配置C-mmclassification-master-configs-base-schedules-imagenet-bs1024-adamw-swin-py中的内容" class="headerlink" title="3.查看并自行配置C:.\mmclassification-master\configs_base_\schedules\imagenet_bs1024_adamw_swin.py中的内容"></a>3.查看并自行配置C:.\mmclassification-master\configs_base_\schedules\imagenet_bs1024_adamw_swin.py中的内容</h2><h2 id="4-查看并自行配置C-mmclassification-master-configs-base-default-runtime-py"><a href="#4-查看并自行配置C-mmclassification-master-configs-base-default-runtime-py" class="headerlink" title="4.查看并自行配置C:...\mmclassification-master\configs_base_\default_runtime.py"></a>4.查看并自行配置C:...\mmclassification-master\configs_base_\default_runtime.py</h2><h2 id="多种方法彻底解决pycharm中-OSError-WinError-1455-页面文件太小，无法完成操作的问题："><a href="#多种方法彻底解决pycharm中-OSError-WinError-1455-页面文件太小，无法完成操作的问题：" class="headerlink" title="多种方法彻底解决pycharm中: OSError: [WinError 1455] 页面文件太小，无法完成操作的问题："></a>多种方法彻底解决pycharm中: OSError: [WinError 1455] 页面文件太小，无法完成操作的问题：</h2><p><a href="https://blog.csdn.net/weixin_43959833/article/details/116669523">https://blog.csdn.net/weixin_43959833/article/details/116669523</a></p><h2 id="此外在…-mmclassification-master-configs-convnext-convnext-tiny-32xb128-in1k-py中可以添加预训练模型，"><a href="#此外在…-mmclassification-master-configs-convnext-convnext-tiny-32xb128-in1k-py中可以添加预训练模型，" class="headerlink" title="此外在….\mmclassification-master\configs\convnext\convnext-tiny_32xb128_in1k.py中可以添加预训练模型，"></a>此外在….\mmclassification-master\configs\convnext\convnext-tiny_32xb128_in1k.py中可以添加预训练模型，</h2><p>在<a href="https://github.com/open-mmlab/mmclassification%E4%B8%AD%E7%9A%84Model">https://github.com/open-mmlab/mmclassification中的Model</a> zoo中的imagenet-1K中找到对应的一行，在Download列点model下载，在….\mmclassification-master\configs\convnext\convnext-tiny_32xb128_in1k.py中添加load_from = ‘…’将下载的全局路径给它即可加载预训练模型的数据</p>]]></content>
      
      
      <categories>
          
          <category> 分类2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 页脚与头图透明 */#footer {  background: transparent !important;}#page-header {  background: transparent !important;}/* 白天模式遮罩透明 */#footer::before {  background: transparent !important;}#page-header::before {  background: transparent !important;}/* 夜间模式遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}/* 小冰分类分类磁铁黑夜模式适配 *//* 一般状态 */[data-theme="dark"] .magnet_link_context {  background: #1e1e1e;  color: antiquewhite;}/* 鼠标悬浮状态 */[data-theme="dark"] .magnet_link_context:hover {  background: #3ecdf1;  color: #f2f2f2;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
